<?xml version="1.0" encoding="UTF-8"?>

<synth>
    <object id="painter" class="hci400assignment.gui.StylePainter" />
    
    <!--#### Definitions #### -->
    <font id="default" name="Arial" size="14" />
    <color id="uiBackground" value="#333333" />
    <color id="uiBackgroundDark" value="#222222" />
    <color id="uiText" value="#EEEEEE" />



    <!--#### Name-class styles ####-->
    
    <!-- Top bar-->
    <style id="topbar_bg">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" idref="uiBackground" />
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="topbar_bg"
          type="NAME" key="([\w_\s]*\s)?topbar_bg(\s[\w_\s]*)?"
    />

    <style id="top_bar_button">
        <color type="BACKGROUND" idref="uiBackground" />w
        <color type="FOREGROUND" idref="uiBackground" />
        <painter method="buttonBorder" idref="painter" />
        <painter method="buttonBackground" idref="painter" />
    </style>
    <bind style="top_bar_button"
          type="NAME" key="([\w_\s]*\s)?top_bar_button(\s[\w_\s]*)?"
    />

    <!-- Control bar -->
    <style id="control_bar_button">
        <color type="BACKGROUND" idref="uiBackground" />
        <painter method="buttonBorder" idref="painter" />
        <painter method="buttonBackground" idref="painter" />
    </style>
    <bind style="control_bar_button"
          type="NAME" key="([\w_\s]*\s)?control_bar_button(\s[\w_\s]*)?"
    />
    
    <style id="control_bar_bg">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" idref="uiBackground" />
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="control_bar_bg"
          type="NAME" key="([\w_\s]*\s)?control_bar_bg(\s[\w_\s]*)?"
    />
    
    <!-- Minimal focus view -->
    <style id="focus_bg">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" value="WHITE" />
            <color type="TEXT_BACKGROUND" value="WHITE" />
            <color type="FOREGROUND" value="BLACK" />
            <color type="TEXT_FOREGROUND" value="BLACK" />
        </state>
    </style>
    <bind style="focus_bg"
          type="NAME" key="([\w_\s]*\s)?focus_bg(\s[\w_\s]*)?"
    />
    
    <style id="focus_content">
        <insets top="11" right="11" bottom="11" left="11" />
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" value="WHITE" />
            <color type="TEXT_BACKGROUND" value="WHITE" />
            <color type="FOREGROUND" value="BLACK" />
            <color type="TEXT_FOREGROUND" value="BLACK" />
        </state>
    </style>
    <bind style="focus_content"
          type="NAME" key="([\w_\s]*\s)?focus_content(\s[\w_\s]*)?"
    />
    
    <!-- Minimal preview card -->
    <style id="minimal_preview_snippet_bg">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" idref="uiBackground" />
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="minimal_preview_snippet_bg"
          type="NAME" key="([\w_\s]*\s)?minimal_preview_snippet_bg(\s[\w_\s]*)?"
    />
    
    <style id="minimal_preview_snippet">
        <state>
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="minimal_preview_snippet"
          type="NAME" key="([\w_\s]*\s)?minimal_preview_snippet(\s[\w_\s]*)?"
    />
    
    <style id="minimal_preview_title_bg">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" idref="uiBackgroundDark" />
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="minimal_preview_title_bg"
          type="NAME" key="([\w_\s]*\s)?minimal_preview_title_bg(\s[\w_\s]*)?"
    />
    
    <style id="minimal_preview_title">
        <state>
            <color type="FOREGROUND" idref="uiText" />
        </state>
    </style>
    <bind style="minimal_preview_title"
          type="NAME" key="([\w_\s]*\s)?minimal_preview_title(\s[\w_\s]*)?"
    />
    
    <style id="minimal_preview_image">
        <!-- -->
    </style>
    <bind style="minimal_preview_image"
          type="NAME" key="([\w_\s]*\s)?minimal_preview_image(\s[\w_\s]*)?"
    />
    
    <!-- ImagePanel -->
    <style id="image_panel">
        <state>
            <opaque value="true"/>
            <color type="BACKGROUND" idref="uiBackgroundDark" />
        </state>
    </style>
    <bind style="image_panel"
          type="NAME" key="([\w_\s]*\s)?image_panel(\s[\w_\s]*)?"
    />
    
    <!--#### Component styles ####-->
    
    <!-- Button -->
    <style id="buttonStyle">
        <font idref="default" />
        <insets top="5" bottom="5" left="10" right="10" />
    </style>
    <bind style="buttonStyle" type="REGION" key="Button" />
    
    <!-- TextField -->
    <style id="textFieldStyle">
        <font idref="default" />
        <insets top="5" bottom="5" left="10" right="10" />
        <state>
            <color value="BLACK" type="FOREGROUND"/>
            <color value="BLACK" type="TEXT_FOREGROUND"/>
            <color value="WHITE" type="BACKGROUND"/>
            <color value="WHITE" type="TEXT_BACKGROUND"/>
        </state>
        <state value="SELECTED">
            <color value="WHITE" type="FOREGROUND"/>
            <color value="WHITE" type="TEXT_FOREGROUND"/>
            <color value="BLACK" type="BACKGROUND"/>
            <color value="BLACK" type="TEXT_BACKGROUND"/>
        </state>
        <painter method="textFieldBackground" idref="painter"/>
    </style>
    <bind style="textFieldStyle" type="REGION" key="TextField" />
    
    <!-- Scrollbar -->
    <style id="scrollBarArrowStyle">
        <property key="ArrowButton.size" type="integer" value="0" />
    </style>
    <bind style="scrollBarArrowStyle" type="REGION" key="ArrowButton" />

    <style id="scrollBarThumbStyle">
        <painter method="scrollBarThumbBackground" idref="painter"/>
    </style>
    <bind style="scrollBarThumbStyle" type="REGION" key="ScrollBarThumb" />

    <style id="scrollbarTrackStyle">
        <opaque value="true"/>
        <state>
            <insets top="1" right="1" bottom="1" left="1"/>
            <color idref="uiBackground" type="BACKGROUND"/>
        </state>
    </style>
    <bind style="scrollbarTrackStyle" type="REGION" key="ScrollBarTrack" />
    
    <!-- ProgressBar -->
    <style id="progressBarStyle">
        <font idref="default" />
        <painter method="progressBarBackground" idref="painter" />
        <insets top="0" bottom="0" left="5" right="5"/>
    </style>
    <bind style="progressBarStyle" type="REGION" key="ProgressBar" />
    
    <!-- Slider -->
    <style id="sliderStyle">
        <state>
            <property key="Slider.paintValue" type="boolean" value="false"/>
            <property key="Slider.thumbWidth" type="integer" value="14"/>
            <property key="Slider.thumbHeight" type="integer" value="14"/>
        </state>

        <font idref="default" />
        <painter method="sliderBackground" idref="painter" />
        <insets top="0" bottom="0" left="5" right="5"/>
    </style>
    <bind style="sliderStyle" type="REGION" key="Slider" />


    <!--Slider Track-->
    <style id="SliderTrackStyle">
        <opaque value="false"/>
    </style>
    <bind style="SliderTrackStyle" type="region" key="sliderTrack" />

    <!--Slider Thumb -->
    <style id="sliderThumbStyle">
        <opaque value="true"/>
        <state>
            <color type="BACKGROUND" value="RED"/>
            <imagePainter method="sliderThumbBackground"
                          path="../resources/icons-large/sliderknob-small.png"
                          sourceInsets="0 0 0 0"
            />
        </state>
    </style>
    <bind style="sliderThumbStyle" type="region" key="SliderThumb" />

</synth>
